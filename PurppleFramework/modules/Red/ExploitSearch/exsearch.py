import requests
import xml.etree.ElementTree as ET
import subprocess

def run_nmap(target):
    """
    Runs Nmap with service version detection and returns the XML output.
    """
    print(f"[+] Running Nmap on {target}...")
    try:
        result = subprocess.run(["nmap", "-sV", "-oX", "-", target], capture_output=True, text=True, check=True)
        return result.stdout
    except subprocess.CalledProcessError as e:
        print("[!] Error running Nmap:", e)
        return None

def parse_nmap_services(nmap_xml):
    """
    Parses Nmap XML to extract detected services and their versions.
    """
    services = []
    root = ET.fromstring(nmap_xml)
    
    for host in root.findall("host"):
        for port in host.find("ports").findall("port"):
            service = port.find("service")
            if service is not None:
                service_name = service.get("name", "Unknown")
                service_version = service.get("version", "")
                services.append((service_name, service_version))
    
    return services

def search_exploit_db(service_name, service_version):
    """
    Searches for exploits in Exploit-DB.
    """
    query = f"{service_name} {service_version}".strip()
    url = f"https://www.exploit-db.com/api/v1/search?query={query}"
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json().get('exploits', [])
    except requests.RequestException:
        pass
    return None

def vulners_search(service_name, service_version):
    """
    Searches for exploits in Vulners.
    """
    query = f"{service_name} {service_version}".strip()
    url = f"https://vulners.com/api/v3/search/lucene/?query={query}"
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json().get('data', {}).get('search', [])
    except requests.RequestException:
        pass
    return None

def search_cve(service_name, service_version):
    """
    Searches for CVEs related to the given service.
    """
    query = f"{service_name} {service_version}".strip()
    url = f"https://cve.circl.lu/api/search/?query={query}"
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json().get('data', [])
    except requests.RequestException:
        pass
    return None

def find_exploits(target):
    """
    Runs Nmap, extracts services, and searches for exploits in Exploit-DB, Vulners, and CVE databases.
    """
    nmap_xml = run_nmap(target)
    if not nmap_xml:
        print("[!] No Nmap data retrieved.")
        return
    
    services = parse_nmap_services(nmap_xml)
    if not services:
        print("[!] No services detected.")
        return
    
    for service_name, service_version in services:
        exploits = search_exploit_db(service_name, service_version)
        vulners_exploits = vulners_search(service_name, service_version)
        cve_exploits = search_cve(service_name, service_version)
        
        if not (exploits or vulners_exploits or cve_exploits):
            continue  # Skip output if nothing found
        
        print(f"\n[*] Searching for exploits for {service_name} {service_version}:")
        
        if exploits:
            print("[*] Exploit-DB Results:")
            for exploit in exploits[:3]:
                print(f"\t- {exploit.get('title', 'Unknown Title')} (Exploit ID: {exploit.get('id', 'N/A')})")
                print(f"\t  Link: https://www.exploit-db.com/exploits/{exploit.get('id', 'N/A')}")
        
        if vulners_exploits:
            print("[*] Vulners Results:")
            for exploit in vulners_exploits[:3]:
                title = exploit.get('title', 'Unknown Title')
                link = exploit.get('link', 'No Link Available')
                print(f"\t- {title} (Link: {link})")
        
        if cve_exploits:
            print("[*] CVE Results:")
            for cve in cve_exploits[:3]:
                print(f"\t- {cve.get('id', 'Unknown ID')} - {cve.get('summary', 'No summary available')}")
                print(f"\t  Link: https://cve.circl.lu/cve/{cve.get('id', 'Unknown ID')}")
        else:
            print("[*] No CVEs found.")

if __name__ == "__main__":
    target = input("Enter target domain or IP: ")
    find_exploits(target)
