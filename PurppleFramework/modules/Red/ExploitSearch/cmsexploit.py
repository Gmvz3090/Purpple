import requests
import re
from urllib.parse import urlparse

# -------------------------------
# CMS Detection & Exploit Checker
# -------------------------------
def ensure_https(url):
    """
    Ensures the URL has HTTPS; if not, adds it.
    """
    parsed_url = urlparse(url)
    if not parsed_url.scheme:
        return f"https://{url}"
    return url

def detect_cms(target):
    """
    Detects the CMS type of a target website.
    """
    target = ensure_https(target)  # Ensure HTTPS before making a request
    try:
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}
        response = requests.get(target, headers=headers, timeout=10, allow_redirects=True)
        response.raise_for_status()  # Raise an error for bad responses (4xx, 5xx)
        html = response.text.lower()

        if "wp-content" in html or "wordpress" in html or "wp-admin" in html:
            print(f"[+] WordPress detected on {target}")
            check_wordpress_version(target)
            find_wordpress_plugins(target)
        elif "joomla" in html or "/administrator" in html:
            print(f"[+] Joomla detected on {target}")
            check_exploits("Joomla", None)  # Joomla version detection is trickier
        elif "drupal" in html or "/sites/all/modules/" in html:
            print(f"[+] Drupal detected on {target}")
            check_exploits("Drupal", None)
        else:
            print("[-] No known CMS detected.")
    except requests.exceptions.RequestException as e:
        print(f"[-] Could not connect to {target}: {e}")

# -------------------------------
# WordPress Version Extraction
# -------------------------------
def check_wordpress_version(target):
    """
    Tries to extract the WordPress version from common locations.
    """
    try:
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}
        response = requests.get(f"{target}/readme.html", headers=headers, timeout=10)
        version = re.search(r"WordPress (\d+\.\d+(\.\d+)?)", response.text)
        if version:
            wp_version = version.group(1)
            print(f"[+] WordPress Version Found: {wp_version}")
            check_exploits("WordPress", wp_version)
            return

        response = requests.get(target, headers=headers, timeout=10)
        version_meta = re.search(r'<meta name="generator" content="WordPress (\d+\.\d+(\.\d+)?)"', response.text)
        if version_meta:
            wp_version = version_meta.group(1)
            print(f"[+] WordPress Version (Meta) Found: {wp_version}")
            check_exploits("WordPress", wp_version)
        else:
            print("[-] WordPress version not found.")
    except requests.exceptions.RequestException as e:
        print(f"[-] Could not retrieve WordPress version: {e}")

# -------------------------------
# WordPress Plugin Detection
# -------------------------------
def find_wordpress_plugins(target):
    """
    Checks for common WordPress plugins that may be vulnerable.
    """
    common_plugins = [
        "woocommerce", "elementor", "yoast-seo", "wpforms-lite", "contact-form-7",
        "wordfence", "wp-super-cache", "akismet", "jetpack", "classic-editor"
    ]
    found_plugins = []
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}
    print("[*] Scanning for common WordPress plugins...")
    
    for plugin in common_plugins:
        url = f"{target}/wp-content/plugins/{plugin}/"
        try:
            response = requests.get(url, headers=headers, timeout=5)
            if response.status_code == 200:
                print(f"[+] Plugin found: {plugin}")
                found_plugins.append(plugin)
        except requests.exceptions.RequestException:
            continue
    
    if found_plugins:
        print(f"[!] Checking for vulnerabilities in {len(found_plugins)} plugins...")
        for plugin in found_plugins:
            check_exploits(f"WordPress {plugin}", None)
    else:
        print("[-] No common plugins found.")

# -------------------------------
# Exploit Search in Exploit-DB
# -------------------------------
def check_exploits(software, version):
    """
    Searches Exploit-DB for vulnerabilities related to the detected software.
    """
    try:
        search_query = f"{software} {version}" if version else software
        print(f"[!] Searching for {software} {version if version else ''} exploits...")
        
        exploit_db_url = f"https://www.exploit-db.com/search?cve={search_query}"
        headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}
        response = requests.get(exploit_db_url, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print(f"[+] Possible exploits found for {software} {version if version else ''}:")
            print(f" ðŸ”— {exploit_db_url}")
        else:
            print("[-] No exploits found.")
    except requests.exceptions.RequestException as e:
        print(f"[-] Could not fetch exploit data: {e}")

# -------------------------------
# Example Usage
# -------------------------------
if __name__ == "__main__":
    target = input("Enter the target URL: ")
    detect_cms(target)
